
import React, { useState } from "react";
import "./App.css";

import QuizGame from "./components/QuizGame";
import BossChallenge from "./components/BossChallenge";
import ClientMeeting from "./components/ClientMeeting";
import ProgressTracker from "./components/ProgressTracker";
import ExerciseSelector from "./components/ExerciseSelector";

import type { GameState } from "./types";
import { criticalThinkingQuestions } from "./data/critical";

import { vocabulary1 } from "./data/vocabulary1";
import { vocabulary2 } from "./data/vocabulary2";
import { vocabulary3 } from "./data/vocabulary3";

import { grammar1 } from "./data/grammar1";
import { grammar2 } from "./data/grammar2";
import { grammar3 } from "./data/grammar3";

const App: React.FC = () => {
  const [gameState, setGameState] = useState<GameState>({
    currentMode: "main",
    score: 0,
    level: 1,
    experience: 0,
    totalQuestions: 0,
    correctAnswers: 0,
  });

  // –≤—ã–±–æ—Ä –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
  const [selectedVocab, setSelectedVocab] = useState<string | null>(null);
  const [selectedGrammar, setSelectedGrammar] = useState<string | null>(null);

  const [showHelp, setShowHelp] = useState(false);

  const handleAnswer = (isCorrect: boolean, points: number) => {
    const gained = isCorrect ? points : 0;
    setGameState((prev) => {
      const experience = prev.experience + gained;
      return {
        ...prev,
        score: prev.score + gained,
        level: Math.floor(experience / 100) + 1,
        experience,
        totalQuestions: prev.totalQuestions + 1,
        correctAnswers: prev.correctAnswers + (isCorrect ? 1 : 0),
      };
    });
  };

  const resetGame = () => {
    setGameState({
      currentMode: "main",
      score: 0,
      level: 1,
      experience: 0,
      totalQuestions: 0,
      correctAnswers: 0,
    });
    setSelectedVocab(null);
    setSelectedGrammar(null);
  };

  const renderHelpSection = () => (
    <div className="help-section">
      <div className="help-header">
        <h2>üìö –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –û—Ñ–∏—Å</h2>
        <button onClick={() => setShowHelp(false)} className="close-btn">√ó</button>
      </div>
      <div className="help-content">
        <div className="help-card">
          <h3>üéØ –õ–µ–∫—Å–∏–∫–∞</h3>
          <p>Business Center ‚Ä¢ Management & Customers ‚Ä¢ Strategy & Admin.</p>
        </div>
        <div className="help-card">
          <h3>‚úèÔ∏è –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞</h3>
          <p>
            Will / Going to ‚Ä¢ Present Continuous ‚Ä¢ Would like / Need / Want ‚Ä¢ Demonstratives ‚Ä¢
            Imperatives ‚Ä¢ Modals ‚Ä¢ There is/are ‚Ä¢ Countable/Uncountable ‚Ä¢ Possessives.
          </p>
        </div>
        <div className="help-card">
          <h3>üß† –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</h3>
          <p>–†–µ–∞–ª—å–Ω—ã–µ –æ—Ñ–∏—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏—è.</p>
        </div>
      </div>
    </div>
  );

  const renderMainMenu = () => (
    <div className="main-menu">
      <div className="header-section">
        <h1>üè¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –û—Ñ–∏—Å</h1>
        <p>–ë–∏–∑–Ω–µ—Å-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å A1</p>
        <p>–õ–µ–∫—Å–∏–∫–∞ ‚Ä¢ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ ‚Ä¢ –û–±—â–µ–Ω–∏–µ</p>
        <ProgressTracker gameState={gameState} />
      </div>

      <div className="menu-grid">
        <button
          onClick={() => setGameState((p) => ({ ...p, currentMode: "vocabulary" }))}
          className="menu-card vocabulary-card"
        >
          <div className="card-icon">üìö</div>
          <h3>–ü—Ä–∞–∫—Ç–∏–∫–∞ –õ–µ–∫—Å–∏–∫–∏</h3>
          <p>Vocabulary 1 / 2 / 3</p>
        </button>

        <button
          onClick={() => setGameState((p) => ({ ...p, currentMode: "grammar" }))}
          className="menu-card grammar-card"
        >
          <div className="card-icon">‚úèÔ∏è</div>
          <h3>–ü—Ä–∞–∫—Ç–∏–∫–∞ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∏</h3>
          <p>Grammar 1 / 2 / 3</p>
        </button>

        <button
          onClick={() => setGameState((p) => ({ ...p, currentMode: "critical_thinking" }))}
          className="menu-card thinking-card"
        >
          <div className="card-icon">üß†</div>
          <h3>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</h3>
          <p>–û—Ñ–∏—Å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏</p>
        </button>

        <button
          onClick={() => setGameState((p) => ({ ...p, currentMode: "communication" }))}
          className="menu-card communication-card"
        >
          <div className="card-icon">üí¨</div>
          <h3>–ù–∞–≤—ã–∫–∏ –æ–±—â–µ–Ω–∏—è</h3>
          <p>–ë–æ—Å—Å –∏ –ö–ª–∏–µ–Ω—Ç</p>
        </button>

        <button onClick={() => setShowHelp(true)} className="menu-card help-card">
          <div className="card-icon">‚ùì</div>
          <h3>–ü–æ–º–æ—â—å –∏ –ø—Ä–∞–≤–∏–ª–∞</h3>
          <p>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º</p>
        </button>

        <button onClick={resetGame} className="menu-card reset-card">
          <div className="card-icon">üîÑ</div>
          <h3>–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
          <p>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</p>
        </button>
      </div>
    </div>
  );

  const renderCommunicationMenu = () => (
    <div className="communication-menu">
      <div className="header-section">
        <h1>üí¨ –ù–∞–≤—ã–∫–∏ –æ–±—â–µ–Ω–∏—è</h1>
        <p>–ü—Ä–∞–∫—Ç–∏–∫–∞ —Å –±–æ—Å—Å–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º</p>
        <button
          onClick={() => setGameState((p) => ({ ...p, currentMode: "main" }))}
          className="back-btn"
        >
          ‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        </button>
      </div>

      <div className="communication-grid">
        <button
          onClick={() => setGameState((p) => ({ ...p, currentMode: "boss" }))}
          className="communication-card boss-card"
        >
          <div className="card-image">
            <img src="/boss.png" alt="–ë–æ—Å—Å" />
          </div>
          <h3>–í—ã–∑–æ–≤ –ë–æ—Å—Å–∞</h3>
          <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</p>
        </button>

        <button
          onClick={() => setGameState((p) => ({ ...p, currentMode: "client" }))}
          className="communication-card client-card"
        >
          <div className="card-image">
            <img src="/client.png" alt="–ö–ª–∏–µ–Ω—Ç" />
          </div>
          <h3>–í—Å—Ç—Ä–µ—á–∞ —Å –ö–ª–∏–µ–Ω—Ç–æ–º</h3>
          <p>–ù–∞–≤—ã–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</p>
        </button>
      </div>
    </div>
  );

  // helpers
  const getVocabQuestions = () => {
    switch (selectedVocab) {
      case "vocab1":
        return vocabulary1;
      case "vocab2":
        return vocabulary2;
      case "vocab3":
        return vocabulary3;
      default:
        return [];
    }
  };

  const getGrammarQuestions = () => {
    switch (selectedGrammar) {
      case "grammar1":
        return grammar1;
      case "grammar2":
        return grammar2;
      case "grammar3":
        return grammar3;
      default:
        return [];
    }
  };

  const renderContent = () => {
    if (showHelp) return renderHelpSection();

    switch (gameState.currentMode) {
      case "vocabulary": {
        if (!selectedVocab) {
          return (
            <ExerciseSelector
              title="–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ –ª–µ–∫—Å–∏–∫–µ"
              items={[
                { key: "vocab1", label: "üìò Vocabulary 1 ‚Äî Business Center" },
                { key: "vocab2", label: "üìó Vocabulary 2 ‚Äî Management & Customers" },
                { key: "vocab3", label: "üìô Vocabulary 3 ‚Äî Strategy & Admin" },
              ]}
              onSelect={(key: string) => setSelectedVocab(key)}

              onBack={() => setGameState((p) => ({ ...p, currentMode: "main" }))}
            />
          );
        }

        return (
          <QuizGame
            questions={getVocabQuestions()}
            onAnswer={handleAnswer}
            onBack={() => setSelectedVocab(null)}
          />
        );
      }

      case "grammar": {
        if (!selectedGrammar) {
          return (
            <ExerciseSelector
              title="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏"
              items={[
                { key: "grammar1", label: "‚úèÔ∏è Grammar 1 ‚Äî Will / Going to / Present Continuous" },
                {
                  key: "grammar2",
                  label: "‚úèÔ∏è Grammar 2 ‚Äî Would like ¬∑ Need/Want ¬∑ Demonstratives ¬∑ Imperatives",
                },
                {
                  key: "grammar3",
                  label: "‚úèÔ∏è Grammar 3 ‚Äî Modals ¬∑ There is/are ¬∑ Count/Uncount ¬∑ Possessives",
                },
              ]}
              onSelect={(key: string) => setSelectedVocab(key)}

              onBack={() => setGameState((p) => ({ ...p, currentMode: "main" }))}
            />
          );
        }

        return (
          <QuizGame
            questions={getGrammarQuestions()}
            onAnswer={handleAnswer}
            onBack={() => setSelectedGrammar(null)}
          />
        );
      }

      case "critical_thinking":
        return (
          <QuizGame
            questions={criticalThinkingQuestions}
            onAnswer={handleAnswer}
            onBack={() => setGameState((p) => ({ ...p, currentMode: "main" }))}
          />
        );

      case "communication":
        return renderCommunicationMenu();

      case "boss":
        return (
          <BossChallenge
            onAnswer={handleAnswer}
            onBack={() => setGameState((p) => ({ ...p, currentMode: "communication" }))}
          />
        );

      case "client":
        return (
          <ClientMeeting
            onAnswer={handleAnswer}
            onBack={() => setGameState((p) => ({ ...p, currentMode: "communication" }))}
          />
        );

      default:
        return renderMainMenu();
    }
  };

  return <div className="app">{renderContent()}</div>;
};

export default App;


